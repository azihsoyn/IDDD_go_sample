// Automatically generated by MockGen. DO NOT EDIT!
// Source: repository.go

package article

import (
	. "github.com/azihsoyn/IDDD_go_sample/internal/domain/article"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoryRecorder
}

// Recorder for MockRepository (not exported)
type _MockRepositoryRecorder struct {
	mock *MockRepository
}

func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &_MockRepositoryRecorder{mock}
	return mock
}

func (_m *MockRepository) EXPECT() *_MockRepositoryRecorder {
	return _m.recorder
}

func (_m *MockRepository) ResolveByID(articleID Identifier) (Article, error) {
	ret := _m.ctrl.Call(_m, "ResolveByID", articleID)
	ret0, _ := ret[0].(Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepositoryRecorder) ResolveByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResolveByID", arg0)
}

func (_m *MockRepository) ResolveAll() ([]Article, error) {
	ret := _m.ctrl.Call(_m, "ResolveAll")
	ret0, _ := ret[0].([]Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepositoryRecorder) ResolveAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResolveAll")
}
